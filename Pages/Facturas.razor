@page "/Facturas"
@inject IJSRuntime JSRuntime

<h3>Facturas</h3>


@foreach (var factura in facturas)
{
<div>
    <h4>@factura.idOrden</h4>
    <p>Estado: @factura.estado</p>
    <select @onchange="@(e => UpdateOrderStatusAsync(factura.idOrden, e.Value.ToString()))">
        <option value="">Selecciona un estado</option>
        <option value="Entregado">Entregado</option>
        <option value="Rechazado">Rechazado</option>
    </select>
</div>
}


@code {

private List<OrdenDeCompra> facturas = new List<OrdenDeCompra>();

protected override async Task OnInitializedAsync()
{
await LoadFacturas();
}

private async Task UpdateOrderStatusAsync(string orderId, string newStatus)
{
Console.WriteLine($"Updating order {orderId} to status {newStatus}");
if (newStatus == "Rechazado")
{
await JSRuntime.InvokeVoidAsync("updateOrderStatusWithSetDoc", orderId, newStatus);
}
else if (newStatus == "Entregado")
{
await JSRuntime.InvokeVoidAsync("updateOrderStatusWithDelivery", orderId, newStatus);
}
await LoadFacturas(); // Recargar las facturas después de cambiar el estado
}

private async Task LoadFacturas()
{
var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
facturas = await JSRuntime.InvokeAsync<List<OrdenDeCompra>>("getUserOrders", userId);
}


public class OrdenDeCompra
{
public string idOrden { get; set; }
public string Nombre { get; set; } = "";
public string Direccion { get; set; } = "";
public string Telefono { get; set; } = "";
public List<Productos> Items { get; set; } = new List<Productos>();
public decimal Total { get; set; } = 0;
public DateOnly Fecha { get; set; } = DateOnly.FromDateTime(DateTime.Now);
public string estado { get; set; } = "";
}

public class Productos
{
public int Quantity { get; set; } = 1;
public string NombreProducto { get; set; } = "";
public decimal Cost { get; set; } = 0;
public decimal Total { get; set; } = 0;
}

}