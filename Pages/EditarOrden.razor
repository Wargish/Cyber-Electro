@page "/editar-orden/{idOrden}"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Editar Orden</h3>

<!-- Formulario de edición -->
@if (orden != null)
{
    <div class="container">
        <form class="form-horizontal">
            <!-- Campos para editar la orden -->
            <div class="row">
                <div class="col-sm-6">
                    <div class="col-sm-10">
                        <label class="control-label col-sm-2">NombreCliente:</label>
                        <InputText class="form-control" @bind-Value="orden.Nombre"/>
                    </div>
                    <div class="col-sm-10">
                        <label class="control-label col-sm-2">Direccion:</label>
                        <InputText class="form-control" @bind-Value="orden.Direccion"/>
                    </div>
                    <div class="col-sm-10">
                        <label class="control-label col-sm-2">Telefono:</label>
                        <InputText class="form-control" @bind-Value="orden.Telefono"/>
                    </div>
                    <div class="col-sm-10">
                        <label class="control-label col-sm-2">NombreEmpresa:</label>
                        <InputText class="form-control" @bind-Value="orden.NombreEmpresa" placeholder="NombreEmpresa"/>
                    </div>
                    <div class="col-sm-10">
                        <label class="control-label col-sm-2">RutEmpresa:</label>
                        <InputText class="form-control" @bind-Value="orden.RutEmpresa" placeholder="RutEmpresa"/>
                    </div>
                    <div class="col-sm-10">
                        <label class="control-label col-sm-2">DireccionEmpresa:</label>
                        <InputText class="form-control" @bind-Value="orden.DireccionEmpresa" placeholder="DireccionEmpresa"/>
                    </div>
                    <div class="col-sm-10">
                        <label class="control-label col-sm-2">TelefonoEmpresa:</label>
                        <InputText class="form-control" @bind-Value="orden.TelefonoEmpresa" placeholder="TelefonoEmpresa"/>
                    </div>

                    <button class="btn btn-primary" @onclick="ActualizarOrden">Actualizar Orden</button>
                    <div class="row">
    </div>
                     
                    
                </div>
            </div>
        </form>
    </div>
}
else if (error != null)
{
    <p>Error: @error.Message</p>
}
else
{
    <p>Cargando...</p>
}

@code {
    // Propiedades para manejar la orden de compra
    private OrdenDeCompra orden;
    private Exception error;

    [Parameter]
    public string idOrden { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Llamar al método para obtener la orden específica según idOrden
            orden = await ObtenerOrdenAsync(idOrden);
        }
        catch (Exception ex)
        {
            error = ex;
        }
    }

    // Método para obtener la orden específica

   private async Task ActualizarOrden()
{
    var ordenActualizada = new Dictionary<string, object>
    {
        {"nombreEmpresa", orden.NombreEmpresa},
        {"rutEmpresa", orden.RutEmpresa},
        {"direccionEmpresa", orden.DireccionEmpresa},
        {"telefonoEmpresa", orden.TelefonoEmpresa}
    };

    await JSRuntime.InvokeVoidAsync("actualizarOrdenEnFirebase", idOrden, ordenActualizada);
}


   private async Task<OrdenDeCompra> ObtenerOrdenAsync(string idOrden)
{
    var DataDeOrdenes = await JSRuntime.InvokeAsync<Dictionary<string, object>>("getDataDeOrdenes", idOrden);
    var empresaData = await JSRuntime.InvokeAsync<Dictionary<string, object>>("getdataempresas", idOrden);

    var orden = new OrdenDeCompra
    {
        Nombre = DataDeOrdenes.ContainsKey("nombre") ? DataDeOrdenes["nombre"].ToString() : "",
        Direccion = DataDeOrdenes.ContainsKey("direccion") ? DataDeOrdenes["direccion"].ToString() : "",
        Telefono = DataDeOrdenes.ContainsKey("telefono") ? DataDeOrdenes["telefono"].ToString() : "",
        NombreEmpresa = empresaData != null && empresaData.ContainsKey("nombreEmpresa") ? empresaData["nombreEmpresa"].ToString() : "",
        RutEmpresa = empresaData != null && empresaData.ContainsKey("rutEmpresa") ? empresaData["rutEmpresa"].ToString() : "",
        DireccionEmpresa = empresaData != null && empresaData.ContainsKey("direccionEmpresa") ? empresaData["direccionEmpresa"].ToString() : "",
        TelefonoEmpresa = empresaData != null && empresaData.ContainsKey("telefonoEmpresa") ? empresaData["telefonoEmpresa"].ToString() : ""
    };

        return orden;
    
}

    // Clase OrdenDeCompra y otras clases relacionadas
    public class OrdenDeCompra
    {
        public string Nombre { get; set; } = "";
        public string Direccion { get; set; } = "";
        public string Telefono { get; set; } = "";
        public string NombreEmpresa { get; set; } = "";
        public string RutEmpresa { get; set; } = "";
        public List<Productos> Items { get; set; } = new List<Productos>();
        public string DireccionEmpresa { get; set; } = "";
        public string TelefonoEmpresa { get; set; } = "";
    }
    public class Productos
    {
        public int Quantity { get; set; } = 1;
        public string NombreProducto { get; set; } = "";
        public decimal Cost { get; set; } = 0;
        public decimal Total { get; set; } = 0;
    }
}


