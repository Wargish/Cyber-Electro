@page "/home"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<link rel="stylesheet" href="/css/home.css">

<h3>Historial de Ordenes de Compra</h3>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="status-container">
        <p class="status por-entregar">Por entregar: @contadorPorEntregar</p>
        <p class="status rechazado">Rechazado: @contadorRechazado</p>
        <p class="status entregado">Entregado: @contadorEntregado</p>
        <p class="status anulada">Anulada: @contadorFacturaAnulada</p>
        <p class="status facturas-creadas">Facturas creadas: @contadorFacturaCreada</p>
        <p class="status facturas-rectificadas">Facturas rectificadas: @contadorFacturaRectificada</p>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>NombreCliente</th>
                <th>Dirección</th>
                <th>Teléfono</th>
                <th>Fecha</th>
                <th>Total</th>
                <th>Facturas</th>
                <th>Estado</th>
                <th>Detalle Productos</th>
                <th>Detalle Empresa</th>
                <th>PDF Facturas</th>
                <th>EDITAR</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Nombre</td>
                    <td>@order.Direccion</td>
                    <td>@order.Telefono</td>
                    <td>@order.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>$@order.Total</td>
                    <td>@order.Factura</td>
                    <td>@order.estado</td>
                    <td><button class="btn btn-primary" @onclick="() => ShowDetail(order)">Detalle</button></td>
                    <td><button class="btn btn-secondary" @onclick="() => ShowEmpresa(order)">Empresa</button></td>
                    <td><button class="btn btn-info" @onclick="() => DescargarPDF(order.idOrden)">DescargarFactura</button></td>
                    @if (order.estado != "Anulado")
            {
                <td><button class="btn btn-info" @onclick='() => NavigationManager.NavigateTo($"/editar-orden/{order.idOrden}")'>EDITAR</button></td>
            }
            else
            {
                <td></td> <!-- Celda vacía para mantener la estructura de la tabla -->
            }
        </tr>
                
            }
        </tbody>
    </table>
}

<!-- Modal -->
<div class="modal" tabindex="-1" style="display:@(selectedOrder != null ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalle de la Orden</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @if (selectedOrder != null)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Cantidad</th>
                                <th>Nombre del producto</th>
                                <th>Precio</th>
                                <th>SubTotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in selectedOrder.Items)
                            {
                                <tr>
                                    <td>@item.Quantity</td>
                                    <td>@item.NombreProducto</td>
                                    <td>@item.Cost</td>
                                    <td>@item.Total</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<button @onclick="Logout">Cerrar sesión</button>

<!-- Otro Modal -->

<div class="modal" tabindex="-1" style="display:@(selectedEmpresa != null ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalle de la Empresa</h5>
                <button type="button" class="btn-close" @onclick="CloseEmpresaModal"></button>
            </div>
            <div class="modal-body">
                @if (selectedEmpresa != null)
                {
                    <p>Razon Social: @selectedEmpresa.NombreEmpresa</p>
                    <p>RUT: @selectedEmpresa.RutEmpresa</p>
                    <p>Dirección: @selectedEmpresa.DireccionEmpresa</p>
                    <p>Teléfono: @selectedEmpresa.TelefonoEmpresa</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseEmpresaModal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<OrdenDeCompra> orders;
    private OrdenDeCompra selectedOrder;
    private Empresa selectedEmpresa;

    private int contadorPorEntregar;
    private int contadorRechazado;
    private int contadorEntregado;
    private int contadorFacturaCreada;
    private int contadorFacturaRectificada;

    private int contadorFacturaAnulada;

    protected override async Task OnInitializedAsync()
    {
        var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
        orders = await JSRuntime.InvokeAsync<List<OrdenDeCompra>>("getUserOrders", userId);

        ContarEstados();
        ContarFacturas();
    }

    private void ContarEstados()
    {
        contadorPorEntregar = orders.Count(o => o.estado == "Por Entregar");
        contadorRechazado = orders.Count(o => o.estado == "Rechazado");
        contadorEntregado = orders.Count(o => o.estado == "Entregado");
        contadorFacturaAnulada = orders.Count(o => o.estado == "Anulado");
    }

    private void ContarFacturas()
    {
        contadorFacturaCreada = orders.Count(o => o.Factura == "creada");
        contadorFacturaRectificada = orders.Count(o => o.Factura == "RECTIFICADA");

    }

    private async Task DescargarPDF(string ordenDeCompraId)
    {
        await JSRuntime.InvokeVoidAsync("descargarPDF", ordenDeCompraId);
    }

    private async Task ShowDetail(OrdenDeCompra order)
    {
        selectedOrder = order;
    }

    private void CloseModal()
    {
        selectedOrder = null;
    }

    private async Task ShowEmpresa(OrdenDeCompra order)
    {
        selectedEmpresa = await JSRuntime.InvokeAsync<Empresa>("getEmpresa", order.idOrden);
    }

    private void CloseEmpresaModal()
    {
        selectedEmpresa = null;
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("logoutUser");
        NavigationManager.NavigateTo("/");
    }

    public class OrdenDeCompra
    {
        public string idOrden { get; set; }
        public string Nombre { get; set; }
        public string Direccion { get; set; }
        public string Telefono { get; set; }
        public List<Productos> Items { get; set; }
        public decimal Total { get; set; }
        public DateOnly Fecha { get; set; } = DateOnly.FromDateTime(DateTime.Now);
        public string Factura { get; set; }
        public string estado { get; set; }
    }

    public class Productos
    {
        public int Quantity { get; set; }
        public string NombreProducto { get; set; }
        public decimal Cost { get; set; }
        public decimal Total { get; set; }
    }

    public class Empresa
    {
        public string NombreEmpresa { get; set; } = "";
        public string RutEmpresa { get; set; } = "";
        public string DireccionEmpresa { get; set; } = "";
        public string TelefonoEmpresa { get; set; } = "";
    }
}